<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title/><link>https://notes.bencuan.me/cs61b/asymptotics/</link><description>Recent content on</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://notes.bencuan.me/cs61b/asymptotics/index.xml" rel="self" type="application/rss+xml"/><item><title>Asymptotic Analysis Basics</title><link>https://notes.bencuan.me/cs61b/asymptotics/asymptotics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs61b/asymptotics/asymptotics/</guid><description>{% hint style=&amp;ldquo;warning&amp;rdquo; %} This concept is a big reason why a strong math background is helpful for computer science, even when it&amp;rsquo;s not obvious that there are connections! Make sure you&amp;rsquo;re comfortable with Calculus concepts up to power series. {% endhint %}
An Abstract Introduction to Asymptotic Analysis # The term asymptotics, or asymptotic analysis, refers to the idea of analyzing functions when their inputs get really big. This is like the asymptotes you might remember learning in math classes, where functions approach a value when they get very large inputs.</description></item><item><title/><link>https://notes.bencuan.me/cs61b/asymptotics/amortization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs61b/asymptotics/amortization/</guid><description>Amortization # {% hint style=&amp;ldquo;warning&amp;rdquo; %} Please read Asymptotic Analysis Basics first. If you don&amp;rsquo;t, none of this will make any sense! {% endhint %}
Amortization means spreading out.
Sometimes, an operation takes different amounts of time for different values of $n$. Rather than having to report runtimes for each different case, we can instead average all of them out and report the amortized runtime.
This is especially good for functions where most actions have a low cost, but a few have a high cost.</description></item><item><title/><link>https://notes.bencuan.me/cs61b/asymptotics/asymptotics-practice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs61b/asymptotics/asymptotics-practice/</guid><description>Asymptotics Practice # {% hint style=&amp;ldquo;warning&amp;rdquo; %} Make sure to review Asymptotic Analysis Basics before proceeding with these problems. {% endhint %}
Introduction # Asymptotics is a very intuition-based concept that often doesn&amp;rsquo;t have a set algorithm for computing. The best way to get good at analyzing programs is to practice!
With that said, here are some problems of increasing difficulty for you to enjoy ðŸ˜Š
{% hint style=&amp;ldquo;info&amp;rdquo; %} For all of the below problems, assume that all undefined functions have a constant O(1) complexity.</description></item></channel></rss>