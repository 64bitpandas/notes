<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title/><link>https://notes.bencuan.me/cs61b/algorithms/minimum-spanning-trees/</link><description>Recent content on</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://notes.bencuan.me/cs61b/algorithms/minimum-spanning-trees/index.xml" rel="self" type="application/rss+xml"/><item><title>Kruskal's Algorithm</title><link>https://notes.bencuan.me/cs61b/algorithms/minimum-spanning-trees/kruskals-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs61b/algorithms/minimum-spanning-trees/kruskals-algorithm/</guid><description>[!info] Content Note
Before reading, review Minimum Spanning Trees and Union Find (Disjoint Sets) as they both make Kruskal&amp;rsquo;s algorithm possible!
Conceptual Overview # Kruskal&amp;rsquo;s algorithm is another optimal way to construct a minimum spanning tree. It&amp;rsquo;s benefits are that it is conceptually very simple, and easy to implement. The idea is that first we sort all the edges of the graph in order of increasing weight. Then, add the smallest edge to the MST we are constructing unless this creates a cycle in the MST.</description></item><item><title>Prim's Algorithm</title><link>https://notes.bencuan.me/cs61b/algorithms/minimum-spanning-trees/prims-algorithm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs61b/algorithms/minimum-spanning-trees/prims-algorithm/</guid><description>[!info] Content Note
Before reading, review Minimum Spanning Trees, as that is the foundation of Prim&amp;rsquo;s algorithm!
Conceptual Overview # Prim&amp;rsquo;s algorithm is an optimal way to construct a minimum spanning tree. It basically starts from an arbitrary vertex, then considers all its immediate neighbors and picks the edge with smallest weight to be part of the MST. Note: this creates a cut in the graph, where the two nodes in the MST being constructed are in one set, and every other vertex of the graph is in another set.</description></item></channel></rss>