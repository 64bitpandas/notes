<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title/><link>https://notes.bencuan.me/cs61b/abstract-data-types/binary-trees/</link><description>Recent content on</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://notes.bencuan.me/cs61b/abstract-data-types/binary-trees/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://notes.bencuan.me/cs61b/abstract-data-types/binary-trees/balanced-search-structures/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs61b/abstract-data-types/binary-trees/balanced-search-structures/</guid><description>Balanced BSTs # {% hint style=&amp;ldquo;warning&amp;rdquo; %} Please read Binary Trees before continuing! {% endhint %}
Balanced Binary Search Trees are an even more specific subcategory of binary trees that have an important property: they are always bushy.
B Trees (2-4 Trees) # The basic idea: Nodes can hold multiple values now! When nodes have too many values, we will split it.
A 2-4 tree is named such because each parent can have 2 to 4 children.</description></item><item><title/><link>https://notes.bencuan.me/cs61b/abstract-data-types/binary-trees/heaps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs61b/abstract-data-types/binary-trees/heaps/</guid><description>Heaps # What are Heaps? # A heap is a specific order of storing data, often in a list. Heaps are very similar to binary trees, but have some differences:
Unlike trees, heaps only care about the root node. Usually, the root node is either the largest or smallest value in the heap (corresponding with max-heaps and min-heaps), and we don&amp;rsquo;t care too much about the rest. Every element in the heap must be larger than all its children (in a max-heap) or smaller than all its children (in a min-heap).</description></item><item><title/><link>https://notes.bencuan.me/cs61b/abstract-data-types/binary-trees/tries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs61b/abstract-data-types/binary-trees/tries/</guid><description>Tries # Main Ideas # A trie is a specific implementation of a set and is short for retrieval tree.
It only works on sets with a finite alphabet, like digits or ASCII characters, for example. The idea is that each node can act like an array containing all characters in the alphabet and we can just access the branches super fast by indexing into them!
Tries are fantastic for searching to see if a word is contained in a set.</description></item></channel></rss>