<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cs70s on</title><link>https://notes.bencuan.me/cs70/</link><description>Recent content in Cs70s on</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://notes.bencuan.me/cs70/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://notes.bencuan.me/cs70/CS70-Index/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs70/CS70-Index/</guid><description>Welcome # Welcome to 64bitpanda&amp;rsquo;s CS70 Guide! # (If you are looking at this in GitHub, go to cs70.bencuan.me for a much better experience!)
This is a non-comprehensive guide to discrete math and probability, specifically for computer science applications. It&amp;rsquo;s based off of Berkeley&amp;rsquo;s CS70 material (and doubles as my notes for the course).
Who is this for? # Mostly me; making unnecessarily detailed guides is my goto method of making sure I understand everythingüòÅBut you are welcome to use it as well for reviewing for exams, touching up on discrete math, or whatever you want!</description></item><item><title/><link>https://notes.bencuan.me/cs70/discrete-math/computability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs70/discrete-math/computability/</guid><description>Computability # Computability is the study of a massively important question: do there exist any problems that are impossible for a computer to solve?
The Halting Problem # It turns out that the above question itself is impossible to solve: in other words, there cannot exist a program HALT which determines if a program can halt in finite time given a particular input.
This was originally proposed by Alan Turing- he proved the nonexistence by attempting to feed the Halting Problem into itself: if the Halting Problem doesn&amp;rsquo;t halt, then it is supposed to output an answer.</description></item><item><title/><link>https://notes.bencuan.me/cs70/discrete-math/countability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs70/discrete-math/countability/</guid><description>Countability # How big is infinity? Are some infinities bigger than others? The $\infty$is a rather mind-boggling concept; the principles of countability will hopefully make some sense out of it.
Bijections # A bijection is a mapping between two sets such that there exists a unique pairing from a particular element of one set to another.
These ideas of existence and uniqueness can be formalized by considering some different types of maps:</description></item><item><title/><link>https://notes.bencuan.me/cs70/discrete-math/graphs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs70/discrete-math/graphs/</guid><description>Graphs # {% hint style=&amp;ldquo;info&amp;rdquo; %} This is a second introduction to graphs that assumes you&amp;rsquo;ve at least seen them before. Take a look at the 61B version if you feel lost! {% endhint %}
What&amp;rsquo;s a graph? # Formally, a graph is a set of vertices with a set of edges connecting them. A graph can be defined as $G = (V, E)$ where $V = {A, B, \cdots V_n}$ and $E = {{A, B}, {B, C} \cdots }$</description></item><item><title/><link>https://notes.bencuan.me/cs70/discrete-math/modular-arithmetic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs70/discrete-math/modular-arithmetic/</guid><description>Modular Arithmetic # What is Modular Arithmetic? # Modular arithmetic is &amp;ldquo;clock math&amp;rdquo; - that is, when numbers wrap around back to 0 if they get too big. You could think about it like a remainder: $21 \pmod{10}$ for example can be read as &amp;ldquo;what is the remainder of 21 when it is divided by 10?&amp;rdquo; (it&amp;rsquo;s 1, by the way.)
This is an important concept in many aspects of computer science, namely cryptography and error correction among many others.</description></item><item><title/><link>https://notes.bencuan.me/cs70/discrete-math/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs70/discrete-math/overview/</guid><description>Overview # What even is discrete math? # According to Wikipedia, &amp;ldquo;Discrete mathematics is the study of mathematical structures that are fundamentally discrete rather than continuous.&amp;rdquo; Very helpful, thank you Wikipedia. The floor is indeed made of floor rather than sky.
The word discrete means &amp;ldquo;distinct&amp;rdquo; or &amp;ldquo;countable&amp;rdquo;. This suggests that discrete math has to do with countable numbers like integers, rather than the continuous $f(x)$functions we&amp;rsquo;re used to seeing that are defined for any real$x$, even ones we don&amp;rsquo;t know the exact value of like $\pi$.</description></item><item><title/><link>https://notes.bencuan.me/cs70/discrete-math/polynomials/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs70/discrete-math/polynomials/</guid><description>Polynomials # Introduction # &amp;ldquo;I learned this in 4th grade&amp;rdquo;, you say, &amp;ldquo;and I already know how to do Taylor approximations and binomial expansions and get local minima&amp;hellip; what else is there to do?&amp;rdquo; (At least that was my first thought :stuck_out_tongue:)
Turns out, polynomials are super useful in the world of discrete math. Here, we&amp;rsquo;ll cover two applications in discrete space, which are secret sharing and error correction.</description></item><item><title/><link>https://notes.bencuan.me/cs70/discrete-math/proofs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs70/discrete-math/proofs/</guid><description>Proofs # Introduction # A proof is a set of logical deductions that can be used to show how something is true. This is powerful because proofs can often be very general, allowing a truth to be used in a whole bunch of cases that don&amp;rsquo;t individually need to be re-proven.
There are a number of common proof techniques (although these certainly aren&amp;rsquo;t exhaustive!) outlined below.
Direct Proofs # In direct proofs, we can use the definitions directly to show that something is true.</description></item><item><title/><link>https://notes.bencuan.me/cs70/discrete-math/propositional-logic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs70/discrete-math/propositional-logic/</guid><description>Propositional Logic # What are Propositions? # Propositions are anything that can be true or false. This could include:
Statements like &amp;ldquo;Birds can fly&amp;rdquo;. Well defined equations with no free variables like $1 + 1 = 3$. Propositions are not:
Variables like $x$ or $5$. Equations with free variables like $P(x) = y$. Statements that aren&amp;rsquo;t clearly true or false, like &amp;ldquo;I like trains.&amp;rdquo; Connectives # Simple propositions can be joined together to make complex statements.</description></item><item><title/><link>https://notes.bencuan.me/cs70/discrete-math/rsa-cryptography/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs70/discrete-math/rsa-cryptography/</guid><description>RSA Cryptography # Introduction # The internet is built upon the fact that stuff needs to go from point A to point B quickly, accurately, and securely. We&amp;rsquo;ll talk about the secure part of that now (the accurate part will be addressed soon!).
One of the ways we can make sure our top-secret messages can&amp;rsquo;t get intercepted is to encrypt them- mix them up to become incomprehensible using some secret code, then decrypt it at the other end.</description></item><item><title/><link>https://notes.bencuan.me/cs70/discrete-math/stable-matching/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs70/discrete-math/stable-matching/</guid><description>Stable Matching # Introduction # The stable matching problem deals with how to match one group to another group while trying to maximize everyone&amp;rsquo;s &amp;lsquo;happiness&amp;rsquo;.
It works best when the two groups are distinct (nobody can be in both groups at once) and the orderings are complete (everyone in the other group has to show up in all orderings). Before we get to examples of when this might apply, I&amp;rsquo;ll throw out a few examples where we can&amp;rsquo;t use this algorithm so you don&amp;rsquo;t get any wrong ideas:</description></item><item><title/><link>https://notes.bencuan.me/cs70/latex-reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs70/latex-reference/</guid><description>LaTeX Reference # Basics # Symbol Description LaTeX $\cdot$ Multiplication dot \cdot $\cdots$ Dots \cdots $\frac{x}{y}$ Fraction \frac{x}{y} $\ge$ Greater than or equal to \ge $\le$ Less than or equal to \le $\ne$ Not equal to \ne $\sum_{i=0}^{n}$ Summation \sum_{i=0}^{n} $\infty$ Infinity \infty $\lim_{x \to \infty}$ Limit \lim_{x \to \infty} Propositional Logic # Symbol Description LaTeX $\implies$ Implication \implies $\iff$ Logical equivalence \iff $\equiv$ Congruence \equiv $\exists$ Existence \exists $\in$ Inclusion \in $\land$ Conjunction (and) \land $\lor$ Disjunction (or) \lor $\lnot$ Negation (not) \lnot $\forall$ For all \forall $\oplus$ Exclusive or (xor) \oplus Sets # Symbol Description LaTeX $\mathbb{C}$ Complex numbers \mathbb{C} $\mathbb{R}$ Real numbers \mathbb{R} $\mathbb{Q}$ Rational numbers \mathbb{Q} $\mathbb{Z}$ Integers \mathbb{Z} $\mathbb{N}$ Natural numbers \mathbb{N} $\mathscr{P}$ Power set \mathscr{P} $\cup$ Union (set or) \cup $\cap$ Intersection (set and) \cap $\emptyset$ Empty Set \emptyset $\setminus$ Set Division \setminus $\subseteq$ Subset (inclusive) \subseteq Modular Arithmetic # Symbol Description LaTeX $p \mod q$ Modulo \mod $p \pmod{q}$ Modulo in parentheses \pmod{q}</description></item><item><title/><link>https://notes.bencuan.me/cs70/probability/concentration-inequalities/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs70/probability/concentration-inequalities/</guid><description>Concentration Inequalities # Markov&amp;rsquo;s Inequality: http://prob140.org/textbook/content/Chapter_18/04_Chi_Squared_Distributions.html
Chebyshev&amp;rsquo;s Inequality: http://prob140.org/textbook/content/Chapter_18/04_Chi_Squared_Distributions.html
Chernoff Bound: http://prob140.org/textbook/content/Chapter_19/04_Chernoff_Bound.html?highlight=chernoff</description></item><item><title/><link>https://notes.bencuan.me/cs70/probability/conditional-expectation-and-variance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs70/probability/conditional-expectation-and-variance/</guid><description>Conditional Expectation and Variance # Properties:
Conditional Expectation # $E(X|Y)$is the conditional expectation of $X$given $Y$
$E(X|Y=y)$is a fixed value, but $E(X|Y)$is a random variable (it is a function of $Y$) Iterated expectation: $E(E(X|Y)) = E(X)$ Additivity: $E(Y+Z | X) = E(Y|X) + E(Z|X)$ does not work on the right hand side: $E(Y | X+Z) \ne E(Y|X) + E(Y|Z)$ Linearity: $E(aX + b | Y) = aE(X|Y) + b$ Conditioning on the same variable: $E(g(S)T | S) = g(S)E(T|S)$ Conditional Variance # If $Var(Y)$is difficult to find directly, we can use the variance decomposition to condition the variance on another variable.</description></item><item><title/><link>https://notes.bencuan.me/cs70/probability/continuous-probability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs70/probability/continuous-probability/</guid><description>Continuous Probability # All of the continuous probability distributions are deeply connected. Above is a chart describing some of their relationships.
Below are some links:
Poisson Beta Exponential Normal Gamma Chi-Squared</description></item><item><title/><link>https://notes.bencuan.me/cs70/probability/counting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs70/probability/counting/</guid><description>Counting # Introduction # If you&amp;rsquo;re reading this, I think it&amp;rsquo;s safe to assume you already know how to count&amp;hellip; (1, 2, 3, whatever) so what&amp;rsquo;s the big deal about counting?
When we say counting in this context, we mean counting sequences of decisions. For example, we might want to get the total number of ways to choose toppings on a pizza or something.
There are two main types of problems: those where order matters and those where it doesn&amp;rsquo;t.</description></item><item><title/><link>https://notes.bencuan.me/cs70/probability/discrete-probability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs70/probability/discrete-probability/</guid><description>Discrete Probability # Probability Basics # http://prob140.org/textbook/content/Chapter_02/00_Calculating_Chances.html
Adding and subtracting probabilities - Multiplying probabilities: random draws without replacement, conditional probabilities Bayes&amp;rsquo; Rule # Bayes&amp;rsquo; Rule is used to re-express conditional probabilities $P(A|B)$.
http://prob140.org/textbook/content/Chapter_02/05_Updating_Probabilities.html#bayes-rule
Random Variables # Probability Spaces # Probability spaces describe all of the possible values of a random variable, and how likely each of those outcomes are.
http://prob140.</description></item><item><title/><link>https://notes.bencuan.me/cs70/probability/expectation-and-variance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs70/probability/expectation-and-variance/</guid><description>Expectation and Variance # The expectation of a random variable, $E(X)$, is the average of possible values weighted by their probabilities. Formally, it can be defined in two ways:
Domain definition: $E(X) = \sum_{\omega \in \Omega} X(\omega) P(\omega)$. Range definition: $E(X) = \sum_x x P(X = x)$. Expectation has nice properties of linearity: $E(X + Y) = E(X) + E(Y)$ and $E(aX + b) = aE(x) + b$.</description></item><item><title/><link>https://notes.bencuan.me/cs70/probability/hashing-and-the-union-bound/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs70/probability/hashing-and-the-union-bound/</guid><description>Hashing and the Union Bound # A hash function assigns a value to each member in a set. It&amp;rsquo;s often useful to determine the probability of collisions: where two different items are assigned the same hash value.
http://prob140.org/textbook/content/Chapter_01/03_Collisions_in_Hashing.html
An interesting result is explored by the Birthday Problem (sometimes known as the Birthday Paradox, despite not actually being paradoxical), in which the probability of at least two people sharing the same birthday is much higher than expected.</description></item><item><title/><link>https://notes.bencuan.me/cs70/probability/markov-chains/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs70/probability/markov-chains/</guid><description>Markov Chains # Markov Chains are a type of stochastic process (a collection of random variables that evolves over time) that satisfy the Markov property (the future state $n+1$ only depends on the current state $n$, and not any of the past states).
Markov chains are often used to model transitions between discrete states.
http://prob140.org/textbook/content/Chapter_10/00_Markov_Chains.html</description></item><item><title/><link>https://notes.bencuan.me/cs70/probability/probability-overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs70/probability/probability-overview/</guid><description>Overview # The probability section of this guide will likely never be fully completed, due to the fact that the Prob 140 textbook is such an excellent resource in probability theory. Go read it and do the problems!
Instead of a full write-up, the pages in this section will typically just link to relevant sections from the textbook. Personally, I found everything I needed to do well in CS70 probability (and much more) here, including examples that are very similar to problems you might see on the homework.</description></item><item><title/><link>https://notes.bencuan.me/cs70/probability/the-beta-family/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs70/probability/the-beta-family/</guid><description>The Beta Family # The Beta distribution is a family of continuous distributions on [0,1] with two parameters (commonly known as $\alpha$ and $\beta$, but also $r$ and $s$).
Beta distributions are commonly used in situations where we want to continually update a prior distribution given new information.
The beta (1,1) distribution is identical to the uniform distribution. http://prob140.org/textbook/content/Chapter_21/00_The_Beta_and_the_Binomial.html</description></item><item><title/><link>https://notes.bencuan.me/cs70/probability/the-gamma-family/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs70/probability/the-gamma-family/</guid><description>The Gamma Family #</description></item><item><title/><link>https://notes.bencuan.me/cs70/SUMMARY/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs70/SUMMARY/</guid><description>Table of contents # Welcome LaTeX Reference Discrete Math # Overview Propositional Logic Proofs Stable Matching Graphs Modular Arithmetic RSA Cryptography Polynomials Countability Computability Probability # Overview Counting Discrete Probability Hashing and the Union Bound Expectation and Variance Concentration Inequalities Continuous Probability Markov Chains The Beta Family The Gamma Family Conditional Expectation and Variance</description></item></channel></rss>