<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CS 168 on</title><link>https://notes.bencuan.me/cs168/</link><description>Recent content in CS 168 on</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://notes.bencuan.me/cs168/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://notes.bencuan.me/cs168/intro-to-the-internet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs168/intro-to-the-internet/</guid><description>About this Class # There are two meanings of internet:
the infrastructure that connects computing devices, or the ecosystem of applications built on that infrastructure. When the average person says &amp;ldquo;internet&amp;rdquo; they usually refer to the second definition. This class, on the other hand, explores the first.
Why study the internet? It&amp;rsquo;s one of the most impactful and life-changing inventions in human history. In addition, it&amp;rsquo;s too large and complex for theoretical models and requires an entirely new design paradigm of:</description></item><item><title>Networking Command Line Tools</title><link>https://notes.bencuan.me/cs168/cli/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs168/cli/</guid><description>nslookup # Resolves a hostname to an IP address (or the reverse).
Basic usage: nslookup &amp;lt;hostname&amp;gt; &amp;lt;DNS server&amp;gt;
Example: ❯ nslookup cs168.io Server: 127.0.0.53 Address: 127.0.0.53#53 Non-authoritative answer: Name: cs168.io Address: 185.199.109.153 Name: cs168.io Address: 185.199.110.153 Name: cs168.io Address: 185.199.111.153 Name: cs168.io Address: 185.199.108.153 Reverse lookup: nslookup &amp;lt;ip&amp;gt;
❯ nslookup 185.199.110.153 153.110.199.185.in-addr.arpa name = cdn-185-199-110-153.github.com. host # Used for DNS lookup (converting between IP addresses and domain names).</description></item><item><title>Introduction to Routing</title><link>https://notes.bencuan.me/cs168/intradomain-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs168/intradomain-routing/</guid><description>Addressing and Naming # In the real world, people have names and are located at addresses. When we move around, our name stays the same, but our address changes.
The internet works in a very similar manner. Hosts have a network name (which describes which host it is) and a network address (where the host is currently located).
Conceptual Intro to Routing # First, we&amp;rsquo;ll run a distributed routing algorithm between switches and routers.</description></item><item><title/><link>https://notes.bencuan.me/cs168/measuring-link-performance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs168/measuring-link-performance/</guid><description>Some values # The Bandwidth of a link is the number of bits sent/received per unit time (measured in bps, bits per second).
The Propagation delay of a link is the time it takes a bit to travel along the link (measured in seconds). It is analogous to the &amp;rsquo;length&amp;rsquo; of the link.
Bandwidth-delay product (BDP) is the product of bandwidth and propagation delay, measured in bits. It is analogous to the total capacity of a link (how many bits can be in the link at the same time).</description></item><item><title>Resource Sharing</title><link>https://notes.bencuan.me/cs168/resource-sharing-packet-and-circuit-switching/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs168/resource-sharing-packet-and-circuit-switching/</guid><description>Statistical Multiplexing # On the internet, millions of packets going to different destinations must share the same routers and paths.
One way to handle this demand is statistical multiplexing- the concept of combining demands to share resources efficiently, rather than statically partitioning resources.
Some examples of statistical multiplexing:
processes sharing CPU cores (vs each process using 1 core) Cloud computing (vs each user has their own datacenter) public transit (vs each person drives a car) The peak of aggregate demand is far less than the aggregate of peak demands.</description></item><item><title>Internet Organization</title><link>https://notes.bencuan.me/cs168/internet-organization-and-layers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs168/internet-organization-and-layers/</guid><description>Currently, five internet layers exist:
Application (L7), where code interfaces with the internet as an abstraction, Transport (L4), which can guarantee either reliable or unreliable data delivery, Network (L3), which delivers best-effort global packet delivery, Datalink (L2), which delivers best-effort local packet delivery, Physical (L1), which physically moves bits between locations. HIstorically, L5 (Session layer) and L6 (Presentation layer) existed, but have since been combined with L7 and L4.</description></item><item><title/><link>https://notes.bencuan.me/cs168/sockets-and-ports/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs168/sockets-and-ports/</guid><description>Network Ports # Switches and routers have physical ports where links connect to switches. The OS supports logical ports where applications connect to the operating system&amp;rsquo;s network stack.
Sockets # A socket is an OS mechanism that creates and manages logical ports. When an app wants access to the network, a socket is opened and associated with a port number. All incoming packets to that port number are then sent to the socket it&amp;rsquo;s associated with.</description></item><item><title>Addressing</title><link>https://notes.bencuan.me/cs168/addressing-ip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs168/addressing-ip/</guid><description>How do we scale the ideas of routing and forwarding to the scale of the entire internet?
This is mainly resolved with the domain of addressing.
Early Addressing Schemes # In the early internet, each network had its own identifier, and each host within a network had its own identifier. Naturally, any host could be addressed using two numbers in the form networkID.hostID.
As a result of this hierarchical addressing scheme, each internal router only needs to store information about the hosts within the same network, as well as a gateway address to a border router connected to external networks.</description></item><item><title>Interdomain Routing (BGP)</title><link>https://notes.bencuan.me/cs168/interdomain-routing-bgp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs168/interdomain-routing-bgp/</guid><description>In [[intradomain routing]], we primarily focused on processes for intradomain routing- where switches discover paths within their own networks.
Now, we&amp;rsquo;ll discuss interdomain routing between many autonomous systems.
Autonomous Systems (AS) # As a review, an autonomous system is a domain that represents a network under a single administrative control. Every AS is assigned a unique ASN by ICANN.
A stub AS only sends and receives packets on behalf of its directly connected hosts.</description></item><item><title>TCP</title><link>https://notes.bencuan.me/cs168/TCP/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs168/TCP/</guid><description>The Transport Layer # The transport layer (L4) is built directly on top of the networking layer. Many different protocols exist on the transport layer, most notably TCP and UDP.
The goal of the transport layer is to bridge the gap between tne abstractions application designers want, and the abstractions that networks can easily support. By providing a common implementation, the transport layer makes development easier.
The main tasks of the transport layer include:</description></item><item><title/><link>https://notes.bencuan.me/cs168/reliability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs168/reliability/</guid><description>In general, the network is best-effort, meaning that packets are not guaranteed to be delivered successfully. How do we build reliability on top of an unreliable network?
Semantics of correct delivery # At the network layer (L3 and below), delivery is best-effort. No guarantees can be made. At the transport layer (L4), delivery is at-least-once. Packets should reach the end host, but may be duplicated. At the application layer (L7), delivery is exactly-once.</description></item><item><title/><link>https://notes.bencuan.me/cs168/congestion-control/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs168/congestion-control/</guid><description>If the capacity of the output link is less than the capacity of the incoming links, then it is possible for too many packets to arrive at once, overloading the link.
Here&amp;rsquo;s a graph of the packet delay as a function of load, assuming that we use a simple queue:
Fundamentally, congestion control is a resource allocation problem. However, it is very complex because changing one link can have a global impact, and these impacts need to be accounted for by every router on every flow change.</description></item><item><title/><link>https://notes.bencuan.me/cs168/dns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs168/dns/</guid><description>DNS (domain name system) was created as a solution to make IP addresses human-readable for users.
In the early days, DNS took the form of a standardized address book called hosts.txt maintained by Elizabeth Feinler at the Network Information Center. This included an IP address, user-friendly name, and properties such as supported protocols. Whenever someone wanted to look up a name, they would query for hosts.txt. However, this got troublesome due to increased burden on the NIC team, high bandwidth usage as the number of hosts increased, and having a single point of failure.</description></item><item><title/><link>https://notes.bencuan.me/cs168/web/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs168/web/</guid><description>Origins # In 1989, Tim Berners-Lee set out to solve a problem: there was a lot of information being stored digitally, and no way to find or access much of it. He created &amp;ldquo;Information Management: A Proposal&amp;rdquo; in which the concept of the &amp;ldquo;web&amp;rdquo; was first established.
This proposal had several key parts:
not based on a hierarchy allows remote access across networks heterogeneity: different systems can access the same data non-centralization: ability for existing systems to be linked together without a central control access to existing data: ability to get data from existing databases to reduce overhead of adapting new system Why was this so successful?</description></item><item><title/><link>https://notes.bencuan.me/cs168/ethernet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs168/ethernet/</guid><description>Shared Media # In a radio network, nodes use a shared medium (the electromagnetic spectrum). As such, transmissions from different nodes might collide with one another, so we need a multiple access protocol to allocate the medium between users.
Some common approaches for doing this include:
Frequency Division Multiplexing: divide medium by frequency. This can be wasteful since frequencies are likely to be idle often. Time Division Multiplexing: divide medium by time.</description></item><item><title/><link>https://notes.bencuan.me/cs168/end-to-end-operation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs168/end-to-end-operation/</guid><description>Suppose we have the following scenario:
Host H1 boots up Fetches small file from H5 Goes idle Fetches two small files from H2 ![[/cs168/img/Pasted image 20221210190305.png]] Here&amp;rsquo;s what will happen:
DHCP to get configuration UDP Discover =&amp;gt; broadcast UDP Offer from H4 &amp;lt;- H1 UDP Request =&amp;gt; broadcast UDP ack &amp;lt;- H1 ARP for DNS server ARP request for H3 =&amp;gt; broadcast H3 ARP response &amp;lt;- unicast to H1 Resolve H5 UDP DNS request for H5.</description></item><item><title/><link>https://notes.bencuan.me/cs168/final-review/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs168/final-review/</guid><description>Part 1 # Original questions: final review part 1
1.1 # less aggressive than normal TCP.
Aggressiveness is determined by the throughput. Higher throughput = more aggressive.
Throughput can be calcuated by dividing the number of bytes over time (or, packets per RTT).
In a normal TCP implementation, the multiplier $M$ is $0.5$.
At full throughput (highest possible window size $W$ before loss occurs), the throughput is $W/RTT$. At minimum throughput during congestion avoidance (right after loss is detected), the throughput is $1/2 \times W/RTT$Q.</description></item></channel></rss>