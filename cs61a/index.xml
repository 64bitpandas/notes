<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CS 61A: Computer Programs on</title><link>https://notes.bencuan.me/cs61a/</link><description>Recent content in CS 61A: Computer Programs on</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://notes.bencuan.me/cs61a/index.xml" rel="self" type="application/rss+xml"/><item><title>Overview</title><link>https://notes.bencuan.me/cs61a/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs61a/introduction/</guid><description>Introduction # Being the largest course at Berkeley, CS 61A has a lot of existing resources- not to mention John DeNero&amp;rsquo;s recorded lectures are everything you could ever hope for in a lecture. I just don&amp;rsquo;t see how I could contribute any meaningful content note that hasn&amp;rsquo;t been done extremely well multiple times already.
Instead, I want to make a space where you can more easily find all of those resources, share some thoughts about my time TAing for 61A, and provide some dialogue about critical skills not taught in 61A but are necessary for succeeding in the CS major and software engineering.</description></item><item><title/><link>https://notes.bencuan.me/cs61a/resources/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs61a/resources/</guid><description>Here are some resources!
My Resources # Scheme Cheat Sheet # This cheat sheet was created in Fall 2021 and includes Scheme syntax bits, and correspondences to Python.
61A Scheme Cheat Sheet
Discussion and Lab Slides # These slides were created by me and presented during the Spring 2022 offering of CS61A.
Link Content Discussion 1 Expressions, values, statements, control, environment diagrams Discussion 2 Higher order functions Discussion 3 Recursion Discussion 4 Tree recursion, lists Discussion 5 Sequences, mutability, OOP Discussion 6 String representation, trees Discussion 7 Linked lists, iterators, generators Discussion 10 Scheme Discussion 11 Tail Recursion Discussion 12 Programs as Data Discussion 13 Regex, BNF Discussion 14 Some advice Lab 1 Python Syntax Lab 2 Higher order functions, lambdas Lab 4 Recursion, tree recursion Lab 5 List comprehensions, mutation Lab 6 OOP, inheritance Lab 7 Trees, linked lists Lab 8 Efficiency Lab 10 Scheme Lab 11 Interpreters Lab 12 Data Abstraction Lab 13 Regex Lab 14 Final review + tips Other Resources # These resources were created by other 61A TA&amp;rsquo;s throughout the years.</description></item><item><title/><link>https://notes.bencuan.me/cs61a/midterm-tips/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://notes.bencuan.me/cs61a/midterm-tips/</guid><description>Introduction # I get asked a lot about whether I have any advice for doing well on 61A exams, so I thought it would be nice to type some of it out. The following is my opinion/experience only, so feel free to ignore some or all of it if something else is more effective for you!
For a more complete guide, please visit https://cs61a.org/articles/studying/!
General Info # Midterm 1 is very early in the semester.</description></item></channel></rss>